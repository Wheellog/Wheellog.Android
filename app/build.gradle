apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

repositories {
    mavenCentral()
    google()
}

android {
    compileSdk 34

    signingConfigs {
        debug {
            storeFile file('../debug.keystore')
        }
    }

    defaultConfig {
        applicationId "com.cooper.wheellog"
        minSdk 21
        targetSdk 34
        versionCode 124
        versionName "3.1.9b"
        buildConfigField 'String', 'BUILD_TIME', "\"" + new Date().format('HH:mm dd.MM.yyyy') + "\""
        buildConfigField 'String', 'BUILD_DATE', "\"" + new Date().format('dd.MM.yyyy') + "\""
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
        kapt {
            arguments {arg("room.schemaLocation", "$projectDir/schemas")}
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".debug"

            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    buildTypes.all { buildType ->
        // private properties
        def props = new Properties()
        def propsPath =  "../local.properties"
        if (file(propsPath).exists()) {
            file(propsPath).withInputStream {
                stream -> props.load(stream)
            }
        }
        def ec_token = System.getProperty("ec_accessToken") ?: props.getProperty('ec_accessToken') ?: ""
        buildType.buildConfigField 'String', 'ec_accessToken', "\"" + ec_token + "\""
        def metrica_api = System.getProperty("metrica_api") ?: props.getProperty('metrica_api') ?: ""
        buildType.buildConfigField 'String', 'metrica_api', "\"" + metrica_api + "\""
    }
    buildFeatures {
        viewBinding true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.2"
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        unitTests.all {
            jvmArgs '-Xmx2g'
        }
    }
    packagingOptions {
        jniLibs {
            excludes += ['META-INF/LICENSE*', 'META-INF/NOTICE*']
        }
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/LICENSE*', 'META-INF/NOTICE*', 'META-INF/ASL2.0', 'META-INF/*.kotlin_module']
        }
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
    lint {
        abortOnError false
        disable 'ComposableNaming'
    }
    namespace 'com.cooper.wheellog'
}

dependencies {
    implementation project(path: ':shared')
    // compose
    implementation "androidx.compose.foundation:foundation:$compose_version"
    implementation "androidx.compose.runtime:runtime:$compose_version"
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    implementation 'androidx.compose.material3:material3:1.1.2'
    implementation 'androidx.navigation:navigation-compose:2.7.4'
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // ViewModel utilities for Compose
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    // database
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    // bluetooth
    implementation 'com.github.weliem:blessed-android:2.4.1'
    // samsung and garmin libs
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.garmin.connectiq:ciq-companion-app-sdk:2.0.3@aar"
    // pebble
    implementation 'com.getpebble:pebblekit:4.0.1'
    // wearOs
    implementation 'com.google.android.gms:play-services-wearable:18.1.0'
    wearApp project(':wearos')
    // common
    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation "androidx.appcompat:appcompat:$appcompact_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'androidx.preference:preference-ktx:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'me.relex:circleindicator:2.1.6'
    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation 'org.osmdroid:osmdroid-android:6.1.18'
    implementation 'org.nanohttpd:nanohttpd:2.3.1'
    implementation 'com.google.guava:guava:32.1.2-jre'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    // coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.2"
    // AppMetrica SDK.
//    implementation ('com.yandex.android:mobmetricalib:5.3.0') {
//        exclude group: 'com.yandex.android', module: 'mobmetricalib-identifiers'
//    }

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.google.truth:truth:1.1.5'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation 'io.mockk:mockk:1.13.8'
    testImplementation 'org.robolectric:robolectric:4.10.3'
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.0'
    testImplementation 'org.json:json:20230618'
}
